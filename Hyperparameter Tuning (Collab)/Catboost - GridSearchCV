{"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":29121,"status":"ok","timestamp":1741464911968,"user":{"displayName":"Andrew Castillo","userId":"02822267340440655112"},"user_tz":360},"id":"TXuI8rKv5CpA","outputId":"f5b9fb75-035b-4e33-dac8-98bab37dd665"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting catboost\n","  Downloading catboost-1.2.7-cp311-cp311-manylinux2014_x86_64.whl.metadata (1.2 kB)\n","Collecting imblearn\n","  Downloading imblearn-0.0-py2.py3-none-any.whl.metadata (355 bytes)\n","Requirement already satisfied: pyarrow in /usr/local/lib/python3.11/dist-packages (18.1.0)\n","Requirement already satisfied: graphviz in /usr/local/lib/python3.11/dist-packages (from catboost) (0.20.3)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (from catboost) (3.10.0)\n","Requirement already satisfied: numpy<2.0,>=1.16.0 in /usr/local/lib/python3.11/dist-packages (from catboost) (1.26.4)\n","Requirement already satisfied: pandas>=0.24 in /usr/local/lib/python3.11/dist-packages (from catboost) (2.2.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from catboost) (1.13.1)\n","Requirement already satisfied: plotly in /usr/local/lib/python3.11/dist-packages (from catboost) (5.24.1)\n","Requirement already satisfied: six in /usr/local/lib/python3.11/dist-packages (from catboost) (1.17.0)\n","Requirement already satisfied: imbalanced-learn in /usr/local/lib/python3.11/dist-packages (from imblearn) (0.13.0)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas>=0.24->catboost) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas>=0.24->catboost) (2025.1)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas>=0.24->catboost) (2025.1)\n","Requirement already satisfied: scikit-learn<2,>=1.3.2 in /usr/local/lib/python3.11/dist-packages (from imbalanced-learn->imblearn) (1.6.1)\n","Requirement already satisfied: sklearn-compat<1,>=0.1 in /usr/local/lib/python3.11/dist-packages (from imbalanced-learn->imblearn) (0.1.3)\n","Requirement already satisfied: joblib<2,>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from imbalanced-learn->imblearn) (1.4.2)\n","Requirement already satisfied: threadpoolctl<4,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from imbalanced-learn->imblearn) (3.5.0)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->catboost) (1.3.1)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib->catboost) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib->catboost) (4.56.0)\n","Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->catboost) (1.4.8)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib->catboost) (24.2)\n","Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib->catboost) (11.1.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->catboost) (3.2.1)\n","Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.11/dist-packages (from plotly->catboost) (9.0.0)\n","Downloading catboost-1.2.7-cp311-cp311-manylinux2014_x86_64.whl (98.7 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m98.7/98.7 MB\u001b[0m \u001b[31m16.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading imblearn-0.0-py2.py3-none-any.whl (1.9 kB)\n","Installing collected packages: catboost, imblearn\n","Successfully installed catboost-1.2.7 imblearn-0.0\n","Mounted at /content/drive\n"]}],"source":["# Hospital Readmission Prediction with CatBoost\n","# Google Colab Version\n","\n","# Install required libraries\n","!pip install catboost imblearn pyarrow\n","\n","# Import libraries\n","import pandas as pd\n","from catboost import CatBoostClassifier, Pool\n","from sklearn.model_selection import train_test_split, GridSearchCV\n","from sklearn.metrics import make_scorer, fbeta_score, classification_report, confusion_matrix\n","from imblearn.over_sampling import SMOTENC\n","from collections import Counter\n","import os\n","import urllib.request\n","from google.colab import files\n","\n","# ✅ Mount Google Drive\n","from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9DoWHuGV6UFi"},"outputs":[],"source":["df = pd.read_parquet(\"/content/drive/MyDrive/ML Project/cleaned_hospital_readmission.parquet\")\n","# 2. Prepare data\n","df[\"readmitted\"] = df[\"readmitted\"].apply(lambda x: 1 if x == \"<30\" else 0)\n","X = df.drop(columns=[\"readmitted\"])  # Features\n","y = df[\"readmitted\"]  # Target variable\n","\n","print(\"Class distribution in the original dataset:\", Counter(y))\n","print(\"Class proportions:\", y.value_counts(normalize=True))\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"DqVLpYdA5vaQ","outputId":"5118e32d-2fff-40b7-a379-b521917b946c"},"outputs":[{"name":"stdout","output_type":"stream","text":["Identified 34 categorical features\n","Original class distribution: Counter({0: 67719, 1: 8818})\n","\n","Imbalanced data handling options:\n","1: Use SMOTENC oversampling\n","2: Use class weights only (no SMOTENC)\n","3: Use both SMOTENC and class weights\n","Class weights calculated: {0: 0.5651072815605664, 1: 4.339816284871853}\n","Applying SMOTENC oversampling...\n","Class distribution after SMOTE: Counter({0: 67719, 1: 20315})\n","\n","Select parameter grid size:\n","1: Minimal (fastest, lowest memory usage)\n","2: Reduced (recommended for standard Colab)\n","3: Full (may require Colab Pro with high-memory runtime)\n","Using recommended reduced parameter grid\n","\n","Available memory before grid search: 48.39 GB\n","Using class weights in the model\n","Using auto_class_weights='Balanced'\n","Starting grid search with the following parameters:\n","learning_rate: [0.05, 0.1]\n","depth: [6, 8]\n","l2_leaf_reg: [3, 5]\n","iterations: [100, 200]\n","border_count: [64]\n","random_strength: [1, 10]\n","subsample: [0.8, 1.0]\n","Running grid search (this may take some time)...\n","Starting grid search with standard configuration...\n","Fitting 5 folds for each of 64 candidates, totalling 320 fits\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/joblib/externals/loky/process_executor.py:752: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["0:\tlearn: 0.5924184\ttotal: 121ms\tremaining: 24.1s\n","100:\tlearn: 0.7568910\ttotal: 12.1s\tremaining: 11.9s\n","199:\tlearn: 0.7687525\ttotal: 24.8s\tremaining: 0us\n","Grid search completed!\n","\n","Best parameters: {'border_count': 64, 'depth': 6, 'iterations': 200, 'l2_leaf_reg': 3, 'learning_rate': 0.1, 'random_strength': 1, 'subsample': 0.8}\n","Best F2 score: 0.6058962934337165\n","\n","Training Performance Metrics:\n","Best parameters: {'border_count': 64, 'depth': 6, 'iterations': 200, 'l2_leaf_reg': 3, 'learning_rate': 0.1, 'random_strength': 1, 'subsample': 0.8}\n","Best cross-validation F2 score: 0.6059\n","\n","Finding optimal prediction threshold for F2 score...\n","Threshold 0.10: F2 = 0.3983\n","Threshold 0.15: F2 = 0.4105\n","Threshold 0.20: F2 = 0.4230\n","Threshold 0.25: F2 = 0.4245\n","Threshold 0.30: F2 = 0.4038\n","Threshold 0.35: F2 = 0.3751\n","Threshold 0.40: F2 = 0.3341\n","Threshold 0.45: F2 = 0.2816\n","Threshold 0.50: F2 = 0.2168\n","Threshold 0.55: F2 = 0.1578\n","Threshold 0.60: F2 = 0.1046\n","Threshold 0.65: F2 = 0.0688\n","\n","Optimal threshold: 0.25 with F2 score: 0.4245\n","\n","F2 score on test set: 0.4245\n","\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.94      0.46      0.61     16930\n","           1       0.15      0.76      0.26      2205\n","\n","    accuracy                           0.49     19135\n","   macro avg       0.54      0.61      0.44     19135\n","weighted avg       0.85      0.49      0.57     19135\n","\n","\n","Confusion Matrix:\n","[[7749 9181]\n"," [ 535 1670]]\n","\n","Additional Metrics for Imbalanced Data:\n","Sensitivity (Recall): 0.7574\n","Specificity: 0.4577\n","Precision: 0.1539\n","Negative Predictive Value: 0.9354\n","F1 Score: 0.2558\n","F2 Score (emphasizes recall): 0.4245\n","Balanced Accuracy: 0.6075\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 1200x800 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n","Top 10 Most Important Features:\n","1. discharge_disposition_id: 19.0322\n","2. diag_3: 10.2111\n","3. diag_1: 9.1037\n","4. diag_2: 8.2215\n","5. primary_diagnosis_3: 6.9165\n","6. discharge_dispositions: 6.2903\n","7. primary_diagnosis_2: 5.7911\n","8. admission_source_id: 5.4216\n","9. admission_sources: 5.4214\n","10. primary_diagnosis_1: 5.0313\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 1200x500 with 2 Axes>"]},"metadata":{},"output_type":"display_data"},{"data":{"image/png":"\n","text/plain":["<Figure size 1000x600 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# 3. Identify categorical features\n","cat_columns = X.select_dtypes(include=['object', 'category']).columns.tolist()\n","cat_indices = [X.columns.get_loc(col) for col in cat_columns]\n","\n","print(f\"Identified {len(cat_columns)} categorical features\")\n","\n","# 4. Split the data\n","X_train, X_test, y_train, y_test = train_test_split(\n","    X, y, test_size=0.2, random_state=42, stratify=y\n",")\n","\n","# 5. Apply SMOTENC to handle class imbalance\n","print(\"Original class distribution:\", Counter(y_train))\n","\n","# Option to use SMOTE, class weights, or both\n","print(\"\\nImbalanced data handling options:\")\n","print(\"1: Use SMOTENC oversampling\")\n","print(\"2: Use class weights only (no SMOTENC)\")\n","print(\"3: Use both SMOTENC and class weights\")\n","\n","imbalance_choice = input(\"Enter choice (1-3), default is 3: \") or \"3\"\n","\n","# Always calculate class weights (will be used either in model or for comparison)\n","from sklearn.utils.class_weight import compute_class_weight\n","\n","# Calculate class weights\n","class_weights = compute_class_weight(\n","    class_weight='balanced',\n","    classes=np.unique(y_train),\n","    y=y_train\n",")\n","class_weights_dict = {i: weight for i, weight in enumerate(class_weights)}\n","print(f\"Class weights calculated: {class_weights_dict}\")\n","\n","use_smote = imbalance_choice in [\"1\", \"3\"]\n","use_class_weights = imbalance_choice in [\"2\", \"3\"]\n","\n","if use_smote:\n","    print(\"Applying SMOTENC oversampling...\")\n","    smote = SMOTENC(sampling_strategy=0.3, random_state=42, categorical_features=cat_indices)\n","    X_train_balanced, y_train_balanced = smote.fit_resample(X_train, y_train)\n","    print(\"Class distribution after SMOTE:\", Counter(y_train_balanced))\n","else:\n","    X_train_balanced, y_train_balanced = X_train, y_train\n","    print(\"Using original class distribution (no SMOTE)\")\n","\n","# 6. Create F2 scorer (emphasizing recall over precision)\n","f2_scorer = make_scorer(fbeta_score, beta=2)\n","\n","# 7. Set up CatBoost-specific data structure\n","train_pool = Pool(X_train_balanced, y_train_balanced, cat_features=cat_columns)\n","\n","# 8. Define parameter grid with options for memory efficiency\n","# Minimal grid - fastest, least memory intensive\n","minimal_param_grid = {\n","    'learning_rate': [0.1],\n","    'depth': [6],\n","    'l2_leaf_reg': [3],\n","    'iterations': [100],\n","    'border_count': [64]\n","}\n","\n","# Reduced grid - faster execution in Colab with moderate memory usage\n","reduced_param_grid = {\n","    'learning_rate': [0.05, 0.1],\n","    'depth': [6, 8],\n","    'l2_leaf_reg': [3, 5],\n","    'iterations': [100, 200],\n","    'border_count': [64]\n","}\n","\n","# Full grid - may cause memory issues in standard Colab\n","full_param_grid = {\n","    'learning_rate': [0.01, 0.05, 0.1],\n","    'depth': [4, 6, 8, 10],\n","    'l2_leaf_reg': [1, 3, 5, 7],\n","    'iterations': [100, 200, 300],\n","    'border_count': [32, 64, 128]\n","}\n","\n","# Let user choose grid size based on available memory\n","print(\"\\nSelect parameter grid size:\")\n","print(\"1: Minimal (fastest, lowest memory usage)\")\n","print(\"2: Reduced (recommended for standard Colab)\")\n","print(\"3: Full (may require Colab Pro with high-memory runtime)\")\n","\n","grid_choice = input(\"Enter choice (1-3), default is 2: \") or \"2\"\n","\n","if grid_choice == \"1\":\n","    chosen_param_grid = minimal_param_grid\n","    print(\"Using minimal parameter grid\")\n","elif grid_choice == \"3\":\n","    chosen_param_grid = full_param_grid\n","    print(\"Using full parameter grid - warning: this may crash due to memory limits\")\n","else:\n","    chosen_param_grid = reduced_param_grid\n","    print(\"Using recommended reduced parameter grid\")\n","\n","# Print memory info to help with troubleshooting\n","import psutil\n","print(f\"\\nAvailable memory before grid search: {psutil.virtual_memory().available / (1024 ** 3):.2f} GB\")\n","\n","# 9. Create and configure CatBoost model\n","# IMPORTANT: CatBoost only allows ONE of these weight parameters to be used at a time\n","if use_class_weights:\n","    print(\"Using class weights in the model\")\n","\n","    # Choose ONE weight balancing method (CatBoost doesn't allow multiple)\n","    weight_method = input(\"\\nSelect ONE class weight method:\\n1: class_weights (manual weights)\\n2: auto_class_weights\\n3: scale_pos_weight\\nChoice (1-3): \") or \"1\"\n","\n","    if weight_method == \"1\":\n","        print(f\"Using manual class_weights: {class_weights_dict}\")\n","        model = CatBoostClassifier(\n","            loss_function='Logloss',\n","            eval_metric='F1',\n","            verbose=100,\n","            class_weights=class_weights_dict  # Manual weights\n","        )\n","    elif weight_method == \"2\":\n","        print(\"Using auto_class_weights='Balanced'\")\n","        model = CatBoostClassifier(\n","            loss_function='Logloss',\n","            eval_metric='F1',\n","            verbose=100,\n","            auto_class_weights='Balanced'  # Automatic balanced weights\n","        )\n","    else:\n","        pos_weight = class_weights_dict[1]\n","        print(f\"Using scale_pos_weight={pos_weight}\")\n","        model = CatBoostClassifier(\n","            loss_function='Logloss',\n","            eval_metric='F1',\n","            verbose=100,\n","            scale_pos_weight=pos_weight  # Weight for positive class only\n","        )\n","else:\n","    print(\"Not using class weights in the model\")\n","    model = CatBoostClassifier(\n","        loss_function='Logloss',\n","        eval_metric='F1',\n","        verbose=100\n","    )\n","\n","# Add additional parameters known to help with imbalanced datasets\n","additional_params = {\n","    'random_strength': [1, 10],  # Helps prevent overfitting\n","    'subsample': [0.8, 1.0],     # Random subsampling of rows\n","}\n","\n","# Add these to the chosen parameter grid if using minimal or reduced grid\n","if grid_choice != \"3\":  # If not using full grid\n","    for param, values in additional_params.items():\n","        chosen_param_grid[param] = values\n","\n","print(\"Starting grid search with the following parameters:\")\n","for param, values in chosen_param_grid.items():\n","    print(f\"{param}: {values}\")\n","\n","# 10. Set up GridSearchCV with F2 scoring\n","# Removed the parallel_backend parameter which was causing errors\n","\n","grid_search = GridSearchCV(\n","    estimator=model,\n","    param_grid=chosen_param_grid,\n","    scoring=f2_scorer,  # Custom F2 scorer\n","    cv=5,              # 5-fold cross-validation\n","    n_jobs=2,          # Use limited number of cores to prevent memory issues\n","    verbose=2,\n","    pre_dispatch='2*n_jobs',  # Limit the number of jobs dispatched in parallel\n","    error_score=0.0    # Return this score instead of raising an error\n",")\n","\n","# 11. Run grid search\n","print(\"Running grid search (this may take some time)...\")\n","\n","# Setting memory limit for Colab\n","import gc\n","import os\n","\n","# Free up memory before starting\n","gc.collect()\n","\n","# Fix for the parallel_backend error - don't use it if it's causing problems\n","try:\n","    # First try regular fit without the parallel_backend wrapper\n","    print(\"Starting grid search with standard configuration...\")\n","    grid_search.fit(\n","        X_train_balanced,\n","        y_train_balanced,\n","        cat_features=cat_columns  # Specify categorical features\n","    )\n","except Exception as e:\n","    print(f\"\\nGrid search encountered an error: {e}\")\n","    print(\"\\nTrying with a smaller parameter grid...\")\n","\n","    # Define a smaller emergency parameter grid\n","    emergency_param_grid = {\n","        'learning_rate': [0.1],\n","        'depth': [6],\n","        'l2_leaf_reg': [3],\n","        'iterations': [100],\n","        'border_count': [64]\n","    }\n","\n","    # Create a new grid search with minimal parameters\n","    emergency_grid = GridSearchCV(\n","        estimator=model,\n","        param_grid=emergency_param_grid,\n","        scoring=f2_scorer,\n","        cv=3,  # Reduced cross-validation\n","        n_jobs=1,  # Single job to minimize memory usage\n","        verbose=2,\n","        error_score=0.0  # Return this score if error instead of raising\n","    )\n","\n","    # Try again with simplified parameters\n","    emergency_grid.fit(\n","        X_train_balanced,\n","        y_train_balanced,\n","        cat_features=cat_columns\n","    )\n","\n","    # Replace the original grid search\n","    grid_search = emergency_grid\n","\n","print(\"Grid search completed!\")\n","\n","# 12. Output results\n","print(\"\\nBest parameters:\", grid_search.best_params_)\n","print(\"Best F2 score:\", grid_search.best_score_)\n","\n","# 13. Get the best model and make predictions\n","best_model = grid_search.best_estimator_\n","\n","# Print training performance metrics\n","print(\"\\nTraining Performance Metrics:\")\n","print(f\"Best parameters: {grid_search.best_params_}\")\n","print(f\"Best cross-validation F2 score: {grid_search.best_score_:.4f}\")\n","\n","# Make predictions\n","y_pred_proba = best_model.predict_proba(X_test)[:, 1]  # Get probabilities for positive class\n","\n","# Try different threshold values to optimize F2 score\n","print(\"\\nFinding optimal prediction threshold for F2 score...\")\n","thresholds = np.arange(0.1, 0.7, 0.05)\n","best_f2 = 0\n","best_threshold = 0.5  # Default\n","\n","for threshold in thresholds:\n","    y_pred_threshold = (y_pred_proba >= threshold).astype(int)\n","    f2 = fbeta_score(y_test, y_pred_threshold, beta=2)\n","    print(f\"Threshold {threshold:.2f}: F2 = {f2:.4f}\")\n","\n","    if f2 > best_f2:\n","        best_f2 = f2\n","        best_threshold = threshold\n","\n","print(f\"\\nOptimal threshold: {best_threshold:.2f} with F2 score: {best_f2:.4f}\")\n","\n","# Use the optimal threshold for final predictions\n","y_pred = (y_pred_proba >= best_threshold).astype(int)\n","\n","# 14. Evaluate the final model\n","# Calculate and print F2 score\n","f2 = fbeta_score(y_test, y_pred, beta=2)\n","print(f\"\\nF2 score on test set: {f2:.4f}\")\n","\n","# Print detailed classification report\n","print(\"\\nClassification Report:\")\n","print(classification_report(y_test, y_pred))\n","\n","# Print confusion matrix\n","print(\"\\nConfusion Matrix:\")\n","conf_matrix = confusion_matrix(y_test, y_pred)\n","print(conf_matrix)\n","\n","# Calculate additional metrics specifically for imbalanced data\n","tn, fp, fn, tp = conf_matrix.ravel()\n","sensitivity = tp / (tp + fn)  # same as recall\n","specificity = tn / (tn + fp)\n","precision = tp / (tp + fp)\n","npv = tn / (tn + fn)  # negative predictive value\n","\n","print(\"\\nAdditional Metrics for Imbalanced Data:\")\n","print(f\"Sensitivity (Recall): {sensitivity:.4f}\")\n","print(f\"Specificity: {specificity:.4f}\")\n","print(f\"Precision: {precision:.4f}\")\n","print(f\"Negative Predictive Value: {npv:.4f}\")\n","print(f\"F1 Score: {2 * (precision * sensitivity) / (precision + sensitivity):.4f}\")\n","print(f\"F2 Score (emphasizes recall): {f2:.4f}\")\n","print(f\"Balanced Accuracy: {(sensitivity + specificity) / 2:.4f}\")\n","\n","# 15. Feature importance visualization\n","import matplotlib.pyplot as plt\n","import numpy as np\n","\n","# Get feature importance\n","feature_importance = best_model.get_feature_importance()\n","feature_names = X.columns\n","\n","# Create a DataFrame for better visualization\n","import pandas as pd\n","importance_df = pd.DataFrame({\n","    'Feature': feature_names,\n","    'Importance': feature_importance\n","})\n","importance_df = importance_df.sort_values(by='Importance', ascending=False)\n","\n","# Plot top 20 features\n","plt.figure(figsize=(12, 8))\n","top_features = importance_df.head(20)\n","plt.barh(range(len(top_features)), top_features['Importance'])\n","plt.yticks(range(len(top_features)), top_features['Feature'])\n","plt.title('Top 20 Features (CatBoost Importance)')\n","plt.xlabel('Importance')\n","plt.tight_layout()\n","plt.show()\n","\n","# Print top features for reference\n","print(\"\\nTop 10 Most Important Features:\")\n","for i, (feature, importance) in enumerate(zip(top_features['Feature'].head(10),\n","                                             top_features['Importance'].head(10))):\n","    print(f\"{i+1}. {feature}: {importance:.4f}\")\n","\n","# 16. Plot ROC curve and precision-recall curve\n","from sklearn.metrics import roc_curve, auc, precision_recall_curve, average_precision_score\n","\n","# ROC Curve\n","plt.figure(figsize=(12, 5))\n","plt.subplot(1, 2, 1)\n","fpr, tpr, _ = roc_curve(y_test, y_pred_proba)\n","roc_auc = auc(fpr, tpr)\n","plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC curve (area = {roc_auc:.2f})')\n","plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n","plt.xlim([0.0, 1.0])\n","plt.ylim([0.0, 1.05])\n","plt.xlabel('False Positive Rate')\n","plt.ylabel('True Positive Rate')\n","plt.title('Receiver Operating Characteristic')\n","plt.legend(loc=\"lower right\")\n","\n","# Precision-Recall Curve\n","plt.subplot(1, 2, 2)\n","precision, recall, _ = precision_recall_curve(y_test, y_pred_proba)\n","avg_precision = average_precision_score(y_test, y_pred_proba)\n","plt.plot(recall, precision, color='blue', lw=2,\n","         label=f'Precision-Recall curve (AP = {avg_precision:.2f})')\n","\n","# Mark the chosen threshold\n","threshold_index = np.argmin(np.abs(np.array(_) - best_threshold))\n","plt.plot(recall[threshold_index], precision[threshold_index], 'ro',\n","         markersize=8, label=f'Chosen threshold ({best_threshold:.2f})')\n","\n","plt.xlim([0.0, 1.0])\n","plt.ylim([0.0, 1.05])\n","plt.xlabel('Recall')\n","plt.ylabel('Precision')\n","plt.title('Precision-Recall Curve')\n","plt.legend(loc=\"lower left\")\n","plt.tight_layout()\n","plt.show()\n","\n","# 17. Plot model's learning curve\n","if 'iterations' in grid_search.best_params_:\n","    iterations = grid_search.best_params_['iterations']\n","    plt.figure(figsize=(10, 6))\n","    plt.plot(best_model.get_evals_result()['learn']['F1'], label='Training F1')\n","    if 'validation' in best_model.get_evals_result():\n","        plt.plot(best_model.get_evals_result()['validation']['F1'], label='Validation F1')\n","    plt.xlabel('Iterations')\n","    plt.ylabel('F1 Score')\n","    plt.title('Learning Curve')\n","    plt.legend()\n","    plt.grid(True)\n","    plt.show()\n","\n","# 16. Save the best model (optional)\n","save_model = input(\"Do you want to save the best model? (y/n): \").lower() == 'y'\n","if save_model:\n","    model_filename = 'hospital_readmission_catboost_model.cbm'\n","    best_model.save_model(model_filename)\n","    print(f\"Model saved to {model_filename}\")\n","\n","    # Download the model file\n","    files.download(model_filename)"]},{"cell_type":"markdown","source":["Feature engineering & re-run GridSearchCV"],"metadata":{"id":"EVFijsLVZDL5"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from catboost import CatBoostClassifier, Pool\n","from sklearn.model_selection import GridSearchCV, train_test_split\n","from sklearn.metrics import make_scorer, fbeta_score, classification_report, confusion_matrix\n","from imblearn.over_sampling import SMOTENC\n","import gc\n","import psutil\n","import os\n","\n","# Load and prepare data\n","def create_medication_features(df):\n","    \"\"\"\n","    Create medication-based features for hospital readmission prediction.\n","    \"\"\"\n","    # Create a copy to avoid modifying the original\n","    data = df.copy()\n","\n","    # List of all medication columns\n","    med_columns = [\n","        'metformin', 'repaglinide', 'nateglinide', 'chlorpropamide',\n","        'glimepiride', 'acetohexamide', 'glipizide', 'glyburide',\n","        'tolbutamide', 'pioglitazone', 'rosiglitazone', 'acarbose',\n","        'miglitol', 'troglitazone', 'tolazamide', 'insulin',\n","        'glyburide-metformin', 'glipizide-metformin', 'glimepiride-pioglitazone',\n","        'metformin-pioglitazone'\n","    ]\n","\n","    # 1. Total Medication Count\n","    data['med_count'] = data[med_columns].apply(lambda x: (x != 'No').sum(), axis=1)\n","    data['on_multiple_meds'] = (data['med_count'] >= 3).astype(int)\n","\n","    # 2. Medication Changes\n","    data['med_changes_up'] = data[med_columns].apply(lambda x: (x == 'Up').sum(), axis=1)\n","    data['med_changes_down'] = data[med_columns].apply(lambda x: (x == 'Down').sum(), axis=1)\n","    data['med_changes_total'] = data['med_changes_up'] + data['med_changes_down']\n","    data['has_med_changes'] = (data['med_changes_total'] > 0).astype(int)\n","\n","    # 3. Insulin Dependency Features\n","    data['insulin_binary'] = (data['insulin'] != 'No').astype(int)\n","    data['insulin_increased'] = (data['insulin'] == 'Up').astype(int)\n","    data['insulin_decreased'] = (data['insulin'] == 'Down').astype(int)\n","    data['insulin_steady'] = (data['insulin'] == 'Steady').astype(int)\n","\n","    # 4. Medication Combinations\n","    data['insulin_plus_oral'] = ((data['insulin'] != 'No') &\n","                                (data[med_columns].apply(lambda x: sum(x != 'No') > 1, axis=1))).astype(int)\n","\n","    # Metformin combinations\n","    metformin_cols = [col for col in med_columns if 'metformin' in col]\n","    data['any_metformin'] = (data[metformin_cols].apply(lambda x: (x != 'No').any(), axis=1)).astype(int)\n","\n","    # Sulfonylureas\n","    sulfonylureas = ['glimepiride', 'glipizide', 'glyburide', 'chlorpropamide', 'tolbutamide']\n","    data['any_sulfonylurea'] = (data[sulfonylureas].apply(lambda x: (x != 'No').any(), axis=1)).astype(int)\n","\n","    # Thiazolidinediones (TZDs)\n","    tzds = ['pioglitazone', 'rosiglitazone', 'troglitazone']\n","    data['any_tzd'] = (data[tzds].apply(lambda x: (x != 'No').any(), axis=1)).astype(int)\n","\n","    # Combined therapy indicators\n","    data['metformin_plus_sulfonylurea'] = (data['any_metformin'] & data['any_sulfonylurea']).astype(int)\n","    data['insulin_plus_metformin'] = (data['insulin_binary'] & data['any_metformin']).astype(int)\n","\n","    # 5. Treatment Intensity Indicator\n","    data['treatment_intensity'] = (\n","        data['med_count'] +\n","        2 * data['insulin_binary'] +\n","        1.5 * data['med_changes_total']\n","    )\n","\n","    return data\n","\n","# --- Main Execution ---\n","\n","# Read dataset:\n","df = pd.read_parquet(\"/content/drive/MyDrive/ML Project/cleaned_hospital_readmission.parquet\")\n","# 2. Prepare data\n","df[\"readmitted\"] = df[\"readmitted\"].apply(lambda x: 1 if x == \"<30\" else 0)\n","\n","# Apply feature engineering\n","print(\"Applying medication-based feature engineering...\")\n","df_enriched = create_medication_features(df)\n","\n","# Split into features and target\n","X = df_enriched.drop(columns=[\"readmitted\"])  # Features\n","y = df_enriched[\"readmitted\"]  # Target variable\n","\n","# Identify categorical columns\n","cat_columns = X.select_dtypes(include=['object', 'category']).columns.tolist()\n","\n","# Calculate cat_indices for SMOTE\n","cat_indices = [X.columns.get_loc(col) for col in cat_columns]\n","\n","# Train-test split with stratification\n","X_train, X_test, y_train, y_test = train_test_split(\n","    X, y, test_size=0.2, random_state=42, stratify=y\n",")\n","\n","# Apply SMOTENC\n","print(\"Applying SMOTENC for class balancing...\")\n","smote = SMOTENC(sampling_strategy=0.3, random_state=42, categorical_features=cat_indices)\n","X_train_balanced, y_train_balanced = smote.fit_resample(X_train, y_train)\n","\n","# Fix any NaN values in categorical columns\n","print(\"Handling potential NaN values in categorical features...\")\n","for col in cat_columns:\n","    if X_train_balanced[col].isna().any():\n","        # Convert to string type first to avoid categorical type issues\n","        X_train_balanced[col] = X_train_balanced[col].astype(str)\n","        X_train_balanced[col] = X_train_balanced[col].replace('nan', 'Missing')\n","\n","        # Same for test set\n","        X_test[col] = X_test[col].astype(str)\n","        X_test[col] = X_test[col].replace('nan', 'Missing')\n","\n","# Create Pool object for CatBoost\n","print(\"Creating CatBoost Pool with categorical features...\")\n","train_pool = Pool(\n","    data=X_train_balanced,\n","    label=y_train_balanced,\n","    cat_features=cat_columns\n",")\n","\n","# Custom scorer for F2\n","f2_scorer = make_scorer(fbeta_score, beta=2)\n","\n","# Create class weight dictionary if needed\n","use_class_weights = True  # Set to False if you don't want to use class weights\n","class_counts = y_train.value_counts()\n","class_weights_dict = {0: 1.0, 1: class_counts[0] / class_counts[1]}\n","print(f\"Class weights: {class_weights_dict}\")\n","\n","# 8. Define parameter grid\n","# Minimal grid - fastest, least memory intensive\n","minimal_param_grid = {\n","    'learning_rate': [0.1],\n","    'depth': [6],\n","    'l2_leaf_reg': [3],\n","    'iterations': [100],\n","    'border_count': [64]\n","}\n","\n","# Reduced grid - faster execution in Colab with moderate memory usage\n","reduced_param_grid = {\n","    'learning_rate': [0.05, 0.1],\n","    'depth': [6, 8],\n","    'l2_leaf_reg': [3, 5],\n","    'iterations': [100, 200],\n","    'border_count': [64]\n","}\n","\n","# Full grid - may cause memory issues in standard Colab\n","full_param_grid = {\n","    'learning_rate': [0.01, 0.05, 0.1],\n","    'depth': [4, 6, 8, 10],\n","    'l2_leaf_reg': [1, 3, 5, 7],\n","    'iterations': [100, 200, 300],\n","    'border_count': [32, 64, 128]\n","}\n","\n","# Let user choose grid size based on available memory\n","print(\"\\nSelect parameter grid size:\")\n","print(\"1: Minimal (fastest, lowest memory usage)\")\n","print(\"2: Reduced (recommended for standard Colab)\")\n","print(\"3: Full (may require Colab Pro with high-memory runtime)\")\n","\n","grid_choice = input(\"Enter choice (1-3), default is 2: \") or \"2\"\n","\n","if grid_choice == \"1\":\n","    chosen_param_grid = minimal_param_grid\n","    print(\"Using minimal parameter grid\")\n","elif grid_choice == \"3\":\n","    chosen_param_grid = full_param_grid\n","    print(\"Using full parameter grid - warning: this may crash due to memory limits\")\n","else:\n","    chosen_param_grid = reduced_param_grid\n","    print(\"Using recommended reduced parameter grid\")\n","\n","# Print memory info to help with troubleshooting\n","print(f\"\\nAvailable memory before grid search: {psutil.virtual_memory().available / (1024 ** 3):.2f} GB\")\n","\n","# 9. Create and configure CatBoost model\n","# IMPORTANT: CatBoost only allows ONE of these weight parameters to be used at a time\n","if use_class_weights:\n","    print(\"Using class weights in the model\")\n","\n","    # Choose ONE weight balancing method (CatBoost doesn't allow multiple)\n","    weight_method = input(\"\\nSelect ONE class weight method:\\n1: class_weights (manual weights)\\n2: auto_class_weights\\n3: scale_pos_weight\\nChoice (1-3): \") or \"1\"\n","\n","    if weight_method == \"1\":\n","        print(f\"Using manual class_weights: {class_weights_dict}\")\n","        model = CatBoostClassifier(\n","            loss_function='Logloss',\n","            eval_metric='F1',\n","            verbose=100,\n","            class_weights=class_weights_dict  # Manual weights\n","        )\n","    elif weight_method == \"2\":\n","        print(\"Using auto_class_weights='Balanced'\")\n","        model = CatBoostClassifier(\n","            loss_function='Logloss',\n","            eval_metric='F1',\n","            verbose=100,\n","            auto_class_weights='Balanced'  # Automatic balanced weights\n","        )\n","    else:\n","        pos_weight = class_weights_dict[1]\n","        print(f\"Using scale_pos_weight={pos_weight}\")\n","        model = CatBoostClassifier(\n","            loss_function='Logloss',\n","            eval_metric='F1',\n","            verbose=100,\n","            scale_pos_weight=pos_weight  # Weight for positive class only\n","        )\n","else:\n","    print(\"Not using class weights in the model\")\n","    model = CatBoostClassifier(\n","        loss_function='Logloss',\n","        eval_metric='F1',\n","        verbose=100\n","    )\n","\n","# Add additional parameters known to help with imbalanced datasets\n","additional_params = {\n","    'random_strength': [1, 10],  # Helps prevent overfitting\n","    'subsample': [0.8, 1.0],     # Random subsampling of rows\n","}\n","\n","# Add these to the chosen parameter grid if using minimal or reduced grid\n","if grid_choice != \"3\":  # If not using full grid\n","    for param, values in additional_params.items():\n","        chosen_param_grid[param] = values\n","\n","print(\"Starting grid search with the following parameters:\")\n","for param, values in chosen_param_grid.items():\n","    print(f\"{param}: {values}\")\n","\n","# 10. Set up GridSearchCV with F2 scoring\n","grid_search = GridSearchCV(\n","    estimator=model,\n","    param_grid=chosen_param_grid,\n","    scoring=f2_scorer,      # Custom F2 scorer\n","    cv=5,                   # 5-fold cross-validation\n","    n_jobs=2,               # Use limited number of cores to prevent memory issues\n","    verbose=2,\n","    pre_dispatch='2*n_jobs', # Limit the number of jobs dispatched in parallel\n","    error_score=0.0         # Return this score instead of raising an error\n",")\n","\n","# 11. Run grid search using Pool\n","print(\"Running grid search with Pool (this may take some time)...\")\n","\n","# Free up memory before starting\n","gc.collect()\n","\n","try:\n","    # Use the Pool object with GridSearchCV\n","    print(\"Starting grid search with Pool...\")\n","    # Note: when using Pool, we pass it directly to fit() instead of X,y\n","    grid_search.fit(train_pool)\n","\n","except Exception as e:\n","    print(f\"\\nGrid search encountered an error: {e}\")\n","    print(\"\\nFalling back to standard GridSearchCV method...\")\n","\n","    try:\n","        # Try the standard method as fallback\n","        grid_search.fit(\n","            X_train_balanced,\n","            y_train_balanced,\n","            cat_features=cat_columns  # Specify categorical features\n","        )\n","    except Exception as e2:\n","        print(f\"\\nStandard method also failed: {e2}\")\n","        print(\"\\nTrying with a smaller parameter grid...\")\n","\n","        # Define a smaller emergency parameter grid\n","        emergency_param_grid = {\n","            'learning_rate': [0.1],\n","            'depth': [6],\n","            'l2_leaf_reg': [3],\n","            'iterations': [100],\n","            'border_count': [64]\n","        }\n","\n","        # Create a new grid search with minimal parameters\n","        emergency_grid = GridSearchCV(\n","            estimator=model,\n","            param_grid=emergency_param_grid,\n","            scoring=f2_scorer,\n","            cv=3,  # Reduced cross-validation\n","            n_jobs=1,  # Single job to minimize memory usage\n","            verbose=2,\n","            error_score=0.0  # Return this score if error instead of raising\n","        )\n","\n","        # Try again with simplified parameters\n","        emergency_grid.fit(\n","            X_train_balanced,\n","            y_train_balanced,\n","            cat_features=cat_columns\n","        )\n","\n","        # Replace the original grid search\n","        grid_search = emergency_grid\n","\n","print(\"Grid search completed!\")\n","\n","# 12. Output results\n","print(\"\\nBest parameters:\", grid_search.best_params_)\n","print(\"Best F2 score:\", grid_search.best_score_)\n","\n","# 13. Get the best model and make predictions\n","best_model = grid_search.best_estimator_\n","\n","# Create a test pool for prediction\n","test_pool = Pool(\n","    data=X_test,\n","    cat_features=cat_columns\n",")\n","\n","# Print training performance metrics\n","print(\"\\nTraining Performance Metrics:\")\n","print(f\"Best parameters: {grid_search.best_params_}\")\n","print(f\"Best cross-validation F2 score: {grid_search.best_score_:.4f}\")\n","\n","# Make predictions\n","# Using the pool for predictions\n","y_pred_proba = best_model.predict_proba(test_pool)[:, 1]  # Get probabilities for positive class\n","\n","# Try different threshold values to optimize F2 score\n","print(\"\\nFinding optimal prediction threshold for F2 score...\")\n","thresholds = np.arange(0.1, 0.7, 0.05)\n","best_f2 = 0\n","best_threshold = 0.5  # Default\n","\n","for threshold in thresholds:\n","    y_pred_threshold = (y_pred_proba >= threshold).astype(int)\n","    f2 = fbeta_score(y_test, y_pred_threshold, beta=2)\n","    print(f\"Threshold {threshold:.2f}: F2 = {f2:.4f}\")\n","\n","    if f2 > best_f2:\n","        best_f2 = f2\n","        best_threshold = threshold\n","\n","print(f\"\\nOptimal threshold: {best_threshold:.2f} with F2 score: {best_f2:.4f}\")\n","\n","# Use the optimal threshold for final predictions\n","y_pred = (y_pred_proba >= best_threshold).astype(int)\n","\n","# 14. Evaluate the final model\n","# Calculate and print F2 score\n","f2 = fbeta_score(y_test, y_pred, beta=2)\n","print(f\"\\nF2 score on test set: {f2:.4f}\")\n","\n","# Print detailed classification report\n","print(\"\\nClassification Report:\")\n","print(classification_report(y_test, y_pred))\n","\n","# Print confusion matrix\n","print(\"\\nConfusion Matrix:\")\n","conf_matrix = confusion_matrix(y_test, y_pred)\n","print(conf_matrix)\n","\n","# Calculate additional metrics specifically for imbalanced data\n","tn, fp, fn, tp = conf_matrix.ravel()\n","sensitivity = tp / (tp + fn)  # same as recall\n","specificity = tn / (tn + fp)\n","precision = tp / (tp + fp)\n","npv = tn / (tn + fn)  # negative predictive value\n","\n","print(\"\\nAdditional Metrics for Imbalanced Data:\")\n","print(f\"Sensitivity (Recall): {sensitivity:.4f}\")\n","print(f\"Specificity: {specificity:.4f}\")\n","print(f\"Precision: {precision:.4f}\")\n","print(f\"Negative Predictive Value: {npv:.4f}\")\n","print(f\"F1 Score: {2 * (precision * sensitivity) / (precision + sensitivity):.4f}\")\n","print(f\"F2 Score (emphasizes recall): {f2:.4f}\")\n","print(f\"Balanced Accuracy: {(sensitivity + specificity) / 2:.4f}\")\n","\n","# Feature importance analysis\n","print(\"\\nFeature Importance:\")\n","feature_importance = best_model.get_feature_importance(train_pool)\n","feature_names = X_train_balanced.columns\n","importance_df = pd.DataFrame({'Feature': feature_names, 'Importance': feature_importance})\n","importance_df = importance_df.sort_values('Importance', ascending=False)\n","print(importance_df.head(20).to_string())  # Show top 20 features"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jhBKfp2IZBqN","executionInfo":{"status":"ok","timestamp":1741469356615,"user_tz":360,"elapsed":4444646,"user":{"displayName":"Andrew Castillo","userId":"02822267340440655112"}},"outputId":"3869d034-21a8-475e-c982-872675625523"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Applying medication-based feature engineering...\n","Applying SMOTENC for class balancing...\n","Handling potential NaN values in categorical features...\n","Creating CatBoost Pool with categorical features...\n","Class weights: {0: 1.0, 1: 7.679632569743706}\n","\n","Select parameter grid size:\n","1: Minimal (fastest, lowest memory usage)\n","2: Reduced (recommended for standard Colab)\n","3: Full (may require Colab Pro with high-memory runtime)\n","Enter choice (1-3), default is 2: 2\n","Using recommended reduced parameter grid\n","\n","Available memory before grid search: 48.55 GB\n","Using class weights in the model\n","\n","Select ONE class weight method:\n","1: class_weights (manual weights)\n","2: auto_class_weights\n","3: scale_pos_weight\n","Choice (1-3): 2\n","Using auto_class_weights='Balanced'\n","Starting grid search with the following parameters:\n","learning_rate: [0.05, 0.1]\n","depth: [6, 8]\n","l2_leaf_reg: [3, 5]\n","iterations: [100, 200]\n","border_count: [64]\n","random_strength: [1, 10]\n","subsample: [0.8, 1.0]\n","Running grid search with Pool (this may take some time)...\n","Starting grid search with Pool...\n","\n","Grid search encountered an error: Input should have at least 1 dimension i.e. satisfy `len(x.shape) > 0`, got scalar `array(<catboost.core.Pool object at 0x7bfd18d68e30>, dtype=object)` instead.\n","\n","Falling back to standard GridSearchCV method...\n","Fitting 5 folds for each of 64 candidates, totalling 320 fits\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/joblib/externals/loky/process_executor.py:752: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["0:\tlearn: 0.6269679\ttotal: 229ms\tremaining: 45.6s\n","100:\tlearn: 0.7705777\ttotal: 18.1s\tremaining: 17.8s\n","199:\tlearn: 0.7937566\ttotal: 37.5s\tremaining: 0us\n","Grid search completed!\n","\n","Best parameters: {'border_count': 64, 'depth': 8, 'iterations': 200, 'l2_leaf_reg': 5, 'learning_rate': 0.1, 'random_strength': 1, 'subsample': 1.0}\n","Best F2 score: 0.6017594069553491\n","\n","Training Performance Metrics:\n","Best parameters: {'border_count': 64, 'depth': 8, 'iterations': 200, 'l2_leaf_reg': 5, 'learning_rate': 0.1, 'random_strength': 1, 'subsample': 1.0}\n","Best cross-validation F2 score: 0.6018\n","\n","Finding optimal prediction threshold for F2 score...\n","Threshold 0.10: F2 = 0.4004\n","Threshold 0.15: F2 = 0.4106\n","Threshold 0.20: F2 = 0.4279\n","Threshold 0.25: F2 = 0.4239\n","Threshold 0.30: F2 = 0.4034\n","Threshold 0.35: F2 = 0.3707\n","Threshold 0.40: F2 = 0.3243\n","Threshold 0.45: F2 = 0.2684\n","Threshold 0.50: F2 = 0.2061\n","Threshold 0.55: F2 = 0.1452\n","Threshold 0.60: F2 = 0.1079\n","Threshold 0.65: F2 = 0.0729\n","\n","Optimal threshold: 0.20 with F2 score: 0.4279\n","\n","F2 score on test set: 0.4279\n","\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.95      0.34      0.50     16930\n","           1       0.14      0.85      0.25      2205\n","\n","    accuracy                           0.40     19135\n","   macro avg       0.54      0.59      0.37     19135\n","weighted avg       0.85      0.40      0.47     19135\n","\n","\n","Confusion Matrix:\n","[[ 5683 11247]\n"," [  327  1878]]\n","\n","Additional Metrics for Imbalanced Data:\n","Sensitivity (Recall): 0.8517\n","Specificity: 0.3357\n","Precision: 0.1431\n","Negative Predictive Value: 0.9456\n","F1 Score: 0.2450\n","F2 Score (emphasizes recall): 0.4279\n","Balanced Accuracy: 0.5937\n","\n","Feature Importance:\n","                     Feature  Importance\n","62       treatment_intensity   10.315032\n","14                    diag_1    9.824875\n","15                    diag_2    7.294812\n","16                    diag_3    6.672854\n","13          number_inpatient    6.195582\n","5   discharge_disposition_id    5.918400\n","46                 med_count    5.621471\n","43       primary_diagnosis_1    5.352151\n","44       primary_diagnosis_2    4.864336\n","38                    change    3.781208\n","45       primary_diagnosis_3    3.611014\n","33                   insulin    3.358137\n","39               diabetesMed    3.300560\n","42    discharge_dispositions    2.758633\n","6        admission_source_id    2.721550\n","4          admission_type_id    2.285089\n","52            insulin_binary    2.158450\n","55            insulin_steady    2.012644\n","40            admission_type    1.766187\n","0                patient_nbr    1.283239\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"pXPxrgDtZBsq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"qzXD5ceDZBvB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"SZdMP1qzZBwo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"ANjRZqFGZByl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Ivp9SDFQZB2k"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"gpuType":"T4","machine_shape":"hm","provenance":[],"authorship_tag":"ABX9TyMXXFCG/KGXGgU4KeI6TbyG"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}